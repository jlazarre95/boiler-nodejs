import { suite, test } from "mocha-typescript";
import { I{{pascalcase-class-name}} } from "src/{{class-name}}/{{class-name}}";
import { mock, instance, when, anything, verify, anyString } from "ts-mockito";
import { {{pascalcase-class-name}}Repository } from "src/{{class-name}}/repositories/{{class-name}}.repository";
import { {{pascalcase-class-name}}Service } from "src/{{class-name}}/services/{{class-name}}.service";
import { Create{{pascalcase-class-name}}DTO } from "src/{{class-name}}/dtos/create-{{class-name}}.dto";
import { assert } from "chai";

@suite
export class {{pascalcase-class-name}}ServiceTests {

    private {{camelcase-class-name}}Service: {{pascalcase-class-name}}Service;

    private {{camelcase-class-name}}RepositoryMock: {{pascalcase-class-name}}Repository = mock({{pascalcase-class-name}}Repository);

    before() {        
        this.{{camelcase-class-name}}Service = new {{pascalcase-class-name}}Service(instance(this.{{camelcase-class-name}}RepositoryMock));
    }

    @test
    async testCreate{{pascalcase-class-name}}() {
        when(this.{{camelcase-class-name}}RepositoryMock.save(anything())).thenCall(async {{camelcase-class-name}} => Promise.resolve({{camelcase-class-name}}));
        const dto: Create{{pascalcase-class-name}}DTO = new Create{{pascalcase-class-name}}DTO();
        dto.id = "123";
        const {{camelcase-class-name}}: I{{pascalcase-class-name}} = await this.{{camelcase-class-name}}Service.create{{pascalcase-class-name}}(dto);
        assert.deepEqual({{camelcase-class-name}}, { _id: "123" });
    } 

    @test
    async testGetAll{{plural-pascalcase-class-name}}() {
        const expectedResult: I{{pascalcase-class-name}}[] = [{ _id: "123" }];
        when(this.{{camelcase-class-name}}RepositoryMock.find(anything())).thenResolve(expectedResult);
        const actualResult: I{{pascalcase-class-name}}[] = await this.{{camelcase-class-name}}Service.getAll{{plural-pascalcase-class-name}}({ test: "xyz" });
        assert.deepEqual(actualResult, expectedResult);
        verify(this.{{camelcase-class-name}}RepositoryMock.find({ test: "xyz" }));
    }

    @test
    async testGet() {
        const expectedResult: I{{pascalcase-class-name}} = { _id: "123" };
        when(this.{{camelcase-class-name}}RepositoryMock.findById(anyString())).thenResolve(expectedResult);
        const actualResult: I{{pascalcase-class-name}} = await this.{{camelcase-class-name}}Service.get{{pascalcase-class-name}}("123");
        assert.deepEqual(actualResult, expectedResult);
        verify(this.{{camelcase-class-name}}RepositoryMock.findById("123"));
    }

}