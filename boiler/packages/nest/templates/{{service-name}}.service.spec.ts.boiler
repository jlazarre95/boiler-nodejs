import { suite, test } from "mocha-typescript";
import { I{{pname}} } from "./interfaces/{{name}}.interface";
import { mock, instance, when, anything, verify, anyString } from "ts-mockito";
import { {{pname}}Repository } from "./{{name}}.repository";
import { {{pname}}Service } from "./{{name}}.service";
import { Create{{pname}}DTO } from "./dtos/create-{{name}}.dto";
import { assert } from "chai";

@suite
export class {{pname}}ServiceTests {

    private {{cname}}Service: {{pname}}Service;

    private {{cname}}RepositoryMock: {{pname}}Repository = mock({{pname}}Repository);

    before() {        
        this.{{cname}}Service = new {{pname}}Service(instance(this.{{cname}}RepositoryMock));
    }

    @test
    async testCreate{{pname}}() {
        when(this.{{cname}}RepositoryMock.save(anything())).thenCall(async {{cname}} => Promise.resolve({{cname}}));
        const dto: Create{{pname}}DTO = new Create{{pname}}DTO();
        dto.id = "123";
        const {{cname}}: I{{pname}} = await this.{{cname}}Service.create{{pname}}(dto);
        assert.deepEqual({{cname}}, { _id: "123" });
    } 

    @test
    async testGetAll{{pluralPascalCaseName}}() {
        const expectedResult: I{{pname}}[] = [{ _id: "123" }];
        when(this.{{cname}}RepositoryMock.find(anything())).thenResolve(expectedResult);
        const actualResult: I{{pname}}[] = await this.{{cname}}Service.getAll{{pluralPascalCaseName}}({ test: "xyz" });
        assert.deepEqual(actualResult, expectedResult);
        verify(this.{{cname}}RepositoryMock.find({ test: "xyz" }));
    }

    @test
    async testGet() {
        const expectedResult: I{{pname}} = { _id: "123" };
        when(this.{{cname}}RepositoryMock.findById(anyString())).thenResolve(expectedResult);
        const actualResult: I{{pname}} = await this.{{cname}}Service.get{{pname}}("123");
        assert.deepEqual(actualResult, expectedResult);
        verify(this.{{cname}}RepositoryMock.findById("123"));
    }

}